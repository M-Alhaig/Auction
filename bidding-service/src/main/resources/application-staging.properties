# ===================================================================
# Bidding Service - Staging Profile Configuration (AWS)
# ===================================================================
# Active with: -Dspring.profiles.active=staging
# Use case: Pre-production testing on AWS (mirrors production setup)
# ===================================================================

# AWS Region
cloud.aws.region.static=${AWS_REGION:us-east-1}
cloud.aws.stack.auto=false

# Database Configuration (AWS RDS PostgreSQL - staging instance)
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# Connection Pool (Moderate sizing for staging)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=600000

# JPA Configuration
spring.jpa.show-sql=false

# AWS SQS/SNS Configuration
cloud.aws.credentials.access-key=${AWS_ACCESS_KEY_ID}
cloud.aws.credentials.secret-key=${AWS_SECRET_ACCESS_KEY}

# SQS Configuration (Staging queues)
aws.sqs.endpoint=${AWS_SQS_ENDPOINT:}
aws.sqs.queue.bid-placed=${SQS_QUEUE_BID_PLACED}
aws.sqs.queue.user-outbid=${SQS_QUEUE_USER_OUTBID}
aws.sqs.queue.auction-started=${SQS_QUEUE_AUCTION_STARTED}
aws.sqs.queue.auction-ended=${SQS_QUEUE_AUCTION_ENDED}
aws.sqs.queue.auction-times-updated=${SQS_QUEUE_AUCTION_TIMES_UPDATED}

# SNS Configuration
aws.sns.topic.auction-events=${SNS_TOPIC_AUCTION_EVENTS}

# AWS ElastiCache Redis Configuration
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.ssl.enabled=${REDIS_SSL_ENABLED:true}
spring.data.redis.timeout=3000ms

# Redis Connection Pool
spring.data.redis.lettuce.pool.enabled=true
spring.data.redis.lettuce.pool.max-active=20
spring.data.redis.lettuce.pool.max-idle=10
spring.data.redis.lettuce.pool.min-idle=5
spring.data.redis.lettuce.pool.max-wait=3000ms

# Item Service client configuration (Staging instance)
item-service.base-url=${ITEM_SERVICE_URL:http://item-service-staging:8082}
item-service.timeout=3000ms
item-service.max-retries=2
item-service.min-backoff=100

# Logging Configuration (CloudWatch with more verbosity for debugging)
logging.level.root=INFO
logging.level.com.auction.biddingservice=DEBUG
logging.level.org.springframework=INFO

# CloudWatch Logs Configuration
logging.group.cloudwatch=com.auction.biddingservice
cloud.aws.logging.enabled=${CLOUDWATCH_LOGS_ENABLED:true}
cloud.aws.logging.log-group=${CLOUDWATCH_LOG_GROUP:/aws/auction/bidding-service-staging}
cloud.aws.logging.log-stream=${CLOUDWATCH_LOG_STREAM:${random.uuid}}

# Actuator (More exposure for staging testing)
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.metrics.export.cloudwatch.enabled=true
management.metrics.export.cloudwatch.namespace=AuctionPlatformStaging
management.metrics.export.cloudwatch.batch-size=20

# AWS Secrets Manager
aws.secretsmanager.enabled=${SECRETS_MANAGER_ENABLED:false}
aws.secretsmanager.name=${SECRETS_MANAGER_NAME:auction/bidding-service/staging}
