package com.auction.biddingservice.models;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Index;
import jakarta.persistence.Table;
import jakarta.persistence.Version;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Objects;
import java.util.UUID;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.proxy.HibernateProxy;

/**
 * Entity representing a bid placed on an auction item.
 *
 * <p>Design Notes: - Uses @Version for optimistic locking as a database-level fallback to Redis
 * distributed locks - Timestamp is auto-generated on creation and cannot be modified - Bidder
 * cannot change their bid amount after submission (immutable bids) - itemId references Item
 * Service's items table (cross-service foreign key by convention only)
 *
 * <p>Concurrency Control: - Primary: Redis distributed lock on "lock:item:{itemId}" before bid
 * insertion - Fallback: @Version field prevents lost updates if Redis lock fails
 *
 * <p>Indexes: - idx_item_bid: Optimized for finding highest bid per item (ORDER BY bid_amount
 * DESC) - idx_bidder: Fast lookup of all bids by a specific user - idx_timestamp: Chronological bid
 * history queries
 */
@Entity
@Table(name = "bids", indexes = {
    @Index(name = "idx_item_bid", columnList = "item_id, bid_amount DESC"),
    @Index(name = "idx_bidder", columnList = "bidder_id"),
    @Index(name = "idx_timestamp", columnList = "timestamp DESC")})
@Getter
@Setter
@ToString
@RequiredArgsConstructor
public class Bid {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  /**
   * Reference to the auction item in Item Service. No @ManyToOne relationship - cross-service
   * boundary.
   */
  @Column(name = "item_id", nullable = false)
  private Long itemId;

  /**
   * UUID of the user who placed this bid. Extracted from JWT token or X-Auth-Id header.
   */
  @Column(name = "bidder_id", nullable = false)
  private UUID bidderId;

  /**
   * Bid amount in dollars. Must be greater than current highest bid for the item.
   */
  @Column(name = "bid_amount", nullable = false, precision = 10, scale = 2)
  private BigDecimal bidAmount;

  /**
   * Timestamp when the bid was placed. Auto-generated by Hibernate on persist.
   */
  @CreationTimestamp
  @Column(name = "timestamp", nullable = false, updatable = false)
  private LocalDateTime timestamp;

  /**
   * Version field for optimistic locking. Prevents lost updates if two transactions try to modify
   * the same bid simultaneously. Acts as fallback if Redis distributed lock fails or is
   * unavailable.
   */
  @Version
  @Column(name = "version")
  private Long version;

  /**
   * Determine whether this Bid is equal to another object, using persistent identity and correctly
   * handling Hibernate proxy instances.
   *
   * <p>Equality is based on the entity's identifier when the identifier is non-null and objects have
   * the same persistent class; objects of different persistent classes or without a matching id are
   * not equal.
   *
   * @param o the object to compare with this Bid
   * @return `true` if `o` is a Bid of the same persistent class with the same non-null id, `false` otherwise
   */
  @Override
  public final boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null) {
      return false;
    }
    Class<?> oEffectiveClass =
        o instanceof HibernateProxy hibernateProxy ? hibernateProxy.getHibernateLazyInitializer()
            .getPersistentClass() : o.getClass();
    Class<?> thisEffectiveClass =
        this instanceof HibernateProxy hibernateProxy ? hibernateProxy.getHibernateLazyInitializer()
            .getPersistentClass() : this.getClass();
    if (thisEffectiveClass != oEffectiveClass) {
      return false;
    }
    if (o instanceof Bid bid) {
      return getId() != null && Objects.equals(getId(), bid.getId());
    }
    return false;
  }

  /**
   * Computes a hash code that is stable across Hibernate proxies and concrete instances.
   *
   * <p>For Hibernate proxies this returns the persistent entity class's hash code; otherwise it returns the concrete class's hash code.</p>
   *
   * @return the hash code used for this entity
   */
  @Override
  public final int hashCode() {
    return this instanceof HibernateProxy hibernateProxy ? hibernateProxy.getHibernateLazyInitializer()
        .getPersistentClass().hashCode() : getClass().hashCode();
  }
}