# ===================================================================
# Item Service - Production Profile Configuration (AWS)
# ===================================================================
# Active with: -Dspring.profiles.active=production
# Use case: Live production environment on AWS
# ===================================================================

# AWS Region
cloud.aws.region.static=${AWS_REGION:us-east-1}
cloud.aws.stack.auto=false

# Database Configuration (AWS RDS PostgreSQL)
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# Connection Pool (HikariCP tuning for production load)
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.leak-detection-threshold=60000

# JPA Configuration (Strict settings)
spring.jpa.show-sql=false
spring.jpa.open-in-view=false

# AWS SQS/SNS Configuration (replaces RabbitMQ)
# EventPublisher implementation will use AWS SDK
cloud.aws.credentials.access-key=${AWS_ACCESS_KEY_ID}
cloud.aws.credentials.secret-key=${AWS_SECRET_ACCESS_KEY}

# SQS Configuration
aws.sqs.endpoint=${AWS_SQS_ENDPOINT:}
aws.sqs.queue.bid-placed=${SQS_QUEUE_BID_PLACED}
aws.sqs.queue.user-outbid=${SQS_QUEUE_USER_OUTBID}
aws.sqs.queue.auction-started=${SQS_QUEUE_AUCTION_STARTED}
aws.sqs.queue.auction-ended=${SQS_QUEUE_AUCTION_ENDED}
aws.sqs.queue.auction-times-updated=${SQS_QUEUE_AUCTION_TIMES_UPDATED}

# SNS Configuration (for pub/sub pattern)
aws.sns.topic.auction-events=${SNS_TOPIC_AUCTION_EVENTS}

# AWS ElastiCache Redis Configuration
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.ssl.enabled=true
spring.data.redis.timeout=3000ms

# Redis Connection Pool (Production tuning)
spring.data.redis.lettuce.pool.enabled=true
spring.data.redis.lettuce.pool.max-active=30
spring.data.redis.lettuce.pool.max-idle=15
spring.data.redis.lettuce.pool.min-idle=10
spring.data.redis.lettuce.pool.max-wait=3000ms

# Logging Configuration (CloudWatch)
logging.level.root=WARN
logging.level.com.auction.itemservice=INFO
logging.level.org.springframework=WARN

# CloudWatch Logs Configuration
# Requires: aws-java-sdk-cloudwatch or spring-cloud-aws
logging.group.cloudwatch=com.auction.itemservice
cloud.aws.logging.enabled=${CLOUDWATCH_LOGS_ENABLED:true}
cloud.aws.logging.log-group=${CLOUDWATCH_LOG_GROUP:/aws/auction/item-service}
cloud.aws.logging.log-stream=${CLOUDWATCH_LOG_STREAM:${random.uuid}}

# Actuator (Limited exposure for security)
management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.health.show-details=never
management.metrics.export.cloudwatch.enabled=true
management.metrics.export.cloudwatch.namespace=AuctionPlatform
management.metrics.export.cloudwatch.batch-size=20

# Security Headers
server.error.include-message=never
server.error.include-stacktrace=never
server.error.include-exception=false

# AWS Secrets Manager (optional - for runtime secret loading)
aws.secretsmanager.enabled=${SECRETS_MANAGER_ENABLED:false}
aws.secretsmanager.name=${SECRETS_MANAGER_NAME:auction/item-service/prod}

# Distributed Scheduler (ShedLock with DynamoDB backend for multi-instance coordination)
# Alternative: Keep using PostgreSQL for ShedLock table
shedlock.provider=${SHEDLOCK_PROVIDER:jdbc}
