spring.application.name=item-service
server.port=8082

spring.datasource.url=jdbc:postgresql://localhost:5433/item_db
spring.datasource.username=auction
spring.datasource.password=123456
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Disable JPA auto-DDL, we'll use Flyway for schema management
spring.jpa.hibernate.ddl-auto=validate

# Flyway configuration
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration

# RabbitMQ configuration
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
rabbitmq.exchange.name=auction-events

# RabbitMQ Listener retry configuration (programmatically configured in RabbitMQConfig)
# - Permanent errors (ItemNotFoundException, IllegalArgumentException): No retry, move to DLQ immediately
# - Transient errors (ConcurrentBidException, others): 3 attempts with exponential backoff (100ms, 150ms, 225ms)
spring.rabbitmq.listener.simple.default-requeue-rejected=false

# Reduce verbosity of Spring AMQP retry logs (our listener already logs with full context)
logging.level.org.springframework.amqp.rabbit.retry.RejectAndDontRequeueRecoverer=ERROR
logging.level.org.springframework.amqp.rabbit.listener.ConditionalRejectingErrorHandler=ERROR

# Redis configuration (for distributed locking on price updates)
spring.data.redis.host=localhost
spring.data.redis.port=6379